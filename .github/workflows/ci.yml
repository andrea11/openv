name: CI (Lint, Build, Release)
on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
permissions:
  contents: write
jobs:
  format:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Run rustfmt
        run: cargo fmt -- --check
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Run Clippy
        run: cargo clippy --all-features -- -D warnings
  test:
    name: Test suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Run tests
        run: cargo test --all-features
        env:
          RUST_BACKTRACE: 1
          RUST_LOG: debug
          RUSTFLAGS: -D warnings
  extract-version:
    name: Extract version from tag
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - name: Extract version from tag
        id: setver
        run: echo "version=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"
  build:
    name: Build ${{ matrix.target }}
    needs:
      - format
      - lint
      - test
      - extract-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: ${{ github.event.repository.name }}-${{ needs.extract-version.outputs.version }}-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_name: ${{ github.event.repository.name }}-${{ needs.extract-version.outputs.version }}-linux-arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_name: ${{ github.event.repository.name }}-${{ needs.extract-version.outputs.version }}-darwin-arm64
            # openv-1.2.0-darwin-arm64.tar.gz
            # openv-1.2.0-linux-amd64.tar.gz
            # - os: windows-latest
            #   target: x86_64-pc-windows-gnu
            #   bin_name: ${{ github.event.repository.name }}.exe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}
      - name: Install cross toolchain (Linux only)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package binary as tar.gz
        if: startsWith(github.ref, 'refs/tags')
        run: |
          mkdir -p dist/${{ github.event.repository.name }}
          cp target/${{ matrix.target }}/release/${{ github.event.repository.name }} dist/${{ github.event.repository.name }}/${{ matrix.bin_name }}
          cd dist
          tar -czf ${{ matrix.bin_name }}.tar.gz ${{ github.event.repository.name }}
      - name: Upload tar.gz artifact
        if: startsWith(github.ref, 'refs/tags')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-tarball
          path: dist/${{ matrix.bin_name }}.tar.gz
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Display downloaded files
        run: ls -R ./artifacts
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}

            Includes binaries for:
            - Linux (x86_64)
            - Linux (aarch64)
            - macOS (Apple Silicon)
          # - Windows (x86_64) [Temporarily disabled]
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASER_TOKEN }}
